{"code":"import { _decorator, Component } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nexport class BaseView extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** @internal */\r\n        this.__isIView__ = true;\r\n        /** @internal */\r\n        this.__group__ = undefined;\r\n        this._eventHandlers = [];\r\n        this._loaderHandlers = [];\r\n    }\r\n    get event() {\r\n        if (!this._eventProxy) {\r\n            this._eventProxy = new Proxy(mf.event, {\r\n                get: (target, prop) => {\r\n                    if (prop === 'on' || prop === 'once') {\r\n                        return (keyOrHandler, listener, context, args) => {\r\n                            const handlers = Array.isArray(keyOrHandler) ? keyOrHandler : [keyOrHandler];\r\n                            handlers.forEach(handler => {\r\n                                if (typeof handler === 'object') {\r\n                                    this._eventHandlers.push({ key: handler.key, listener: handler.listener });\r\n                                }\r\n                                else {\r\n                                    this._eventHandlers.push({ key: keyOrHandler, listener: listener });\r\n                                }\r\n                            });\r\n                            return Reflect.get(target, prop).apply(target, [keyOrHandler, listener, context, args]);\r\n                        };\r\n                    }\r\n                    return Reflect.get(target, prop);\r\n                }\r\n            });\r\n        }\r\n        return this._eventProxy;\r\n    }\r\n    get res() {\r\n        if (!this._loaderProxy) {\r\n            this._loaderProxy = new Proxy(mf.res, {\r\n                get: (target, prop) => {\r\n                    //劫持所有load相关方法\r\n                    if (prop.startsWith('load')) {\r\n                        return (path, type, nameOrUrl) => {\r\n                            return Reflect.get(target, prop).apply(target, [path, type, nameOrUrl]).then((asset) => {\r\n                                this._loaderHandlers.push({ path, asset });\r\n                                return asset;\r\n                            });\r\n                        };\r\n                    }\r\n                    return Reflect.get(target, prop);\r\n                }\r\n            });\r\n        }\r\n        return this._loaderProxy;\r\n    }\r\n    onExit() {\r\n        // 自动清理所有事件监听\r\n        this._eventHandlers.forEach(({ key, listener }) => {\r\n            //@ts-ignore\r\n            mf.event.off(key, listener);\r\n        });\r\n        this._eventHandlers = [];\r\n    }\r\n    onDestroy() {\r\n        // 自动清理加载的资源\r\n        this._loaderHandlers.forEach(({ path, asset }) => {\r\n            mf.res.release(path, asset.constructor);\r\n            // mf.res.release(asset);\r\n        });\r\n        this._loaderHandlers = [];\r\n    }\r\n    getManager(ctor) {\r\n        // 业务组件避免直接依赖底层服务定位器，所以使用app.core统一对外接口，方便后续架构演进\r\n        return mf.core.getManager(ctor);\r\n    }\r\n    getModel(ctor) {\r\n        // 业务组件避免直接依赖底层服务定位器，所以使用app.core统一对外接口，方便后续架构演进\r\n        return mf.core.getModel(ctor);\r\n    }\r\n}\r\n","references":["/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/src/core/index.ts"],"dts":{"name":"/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/.cache/rollup-plugin-typescript2/placeholder/libs/BaseView.d.ts","writeByteOrderMark":false,"text":"import { Component } from 'cc';\r\nimport { IView, IManager, IModel, IEventManager, ICocosResManager } from '../core';\r\nexport declare abstract class BaseView extends Component implements IView {\r\n    /** @internal */\r\n    private readonly __isIView__;\r\n    /** @internal */\r\n    private __group__;\r\n    private _eventProxy?;\r\n    private _eventHandlers;\r\n    protected get event(): IEventManager;\r\n    private _loaderProxy?;\r\n    private _loaderHandlers;\r\n    protected get res(): ICocosResManager;\r\n    abstract onPause(): void;\r\n    abstract onResume(): void;\r\n    abstract onEnter(args?: any): void;\r\n    onExit(): void;\r\n    protected onDestroy(): void;\r\n    protected getManager<T extends IManager>(ctor: new () => T): T;\r\n    protected getModel<T extends IModel>(ctor: new () => T): T;\r\n}\r\n"}}
