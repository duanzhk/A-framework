{"code":"export {};\r\n","references":[],"dts":{"name":"/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/Api.d.ts","writeByteOrderMark":false,"text":"export interface ICore {\r\n    regModel<T extends IModel>(model: T): void;\r\n    getModel<T extends IModel>(ctor: new () => T): T;\r\n    regManager<T extends IManager>(manager: T): void;\r\n    getManager<T extends IManager>(ctor: new () => T): T;\r\n    getManager<T extends IManager>(symbol: symbol): T;\r\n}\r\nexport interface IManager {\r\n    initialize(): void;\r\n    dispose(): void;\r\n}\r\nexport interface IModel {\r\n    initialize(): void;\r\n}\r\nexport interface IView {\r\n    onEnter(args?: any): void;\r\n    onExit(): void;\r\n    onPause(): void;\r\n    onResume(): void;\r\n}\r\nexport interface IUIManager {\r\n    open<T extends IView>(viewType: new () => T, args?: any): Promise<T>;\r\n    close<T extends IView>(viewortype: T | (new () => T), destory?: boolean): void;\r\n    openAndPush<T extends IView>(viewType: new () => T, group: string, args?: any): Promise<T>;\r\n    closeAndPop(group: string, destroy?: boolean): void;\r\n    getTopView(): IView | undefined;\r\n    clearStack(group: string, destroy?: boolean): void;\r\n}\r\nexport interface IResManager {\r\n}\r\nexport interface IEventMsgKey {\r\n}\r\nexport type ToAnyIndexKey<IndexKey, AnyType> = IndexKey extends keyof AnyType ? IndexKey : keyof AnyType;\r\nexport type OnListenerResult<T = any> = (data?: T, callBack?: any) => void;\r\nexport type OnListener<T = any, K = any> = (value?: T, callBack?: OnListenerResult<K>, ...args: any[]) => void;\r\nexport type ListenerHandler<keyType extends keyof any = any, ValueType = any, ResultType = any> = {\r\n    key: keyType;\r\n    listener: OnListener<ValueType[ToAnyIndexKey<keyType, ValueType>], ResultType[ToAnyIndexKey<keyType, ResultType>]>;\r\n    context?: any;\r\n    args?: any[];\r\n};\r\nexport interface IEventManager<MsgKeyType extends IEventMsgKey = IEventMsgKey, ValueType = any, ResultType = any> {\r\n    on<keyType extends keyof MsgKeyType>(keyOrHandler: keyType | ListenerHandler<keyType, ValueType, ResultType> | ListenerHandler<keyType, ValueType, ResultType>[], listener?: OnListener<ValueType[ToAnyIndexKey<keyType, ValueType>], ResultType[ToAnyIndexKey<keyType, ResultType>]>, context?: any, args?: any[]): void;\r\n    once<keyType extends keyof MsgKeyType>(keyOrHandler: keyType | ListenerHandler<keyType, ValueType, ResultType> | ListenerHandler<keyType, ValueType, ResultType>[], listener?: OnListener<ValueType[ToAnyIndexKey<keyType, ValueType>], ResultType[ToAnyIndexKey<keyType, ResultType>]>, context?: any, args?: any[]): void;\r\n    off<keyType extends keyof MsgKeyType>(key: keyType, listener: OnListener<ValueType[ToAnyIndexKey<keyType, ValueType>], ResultType[ToAnyIndexKey<keyType, ResultType>]>): void;\r\n    offAll<keyType extends keyof MsgKeyType>(key?: keyType, context?: any): void;\r\n    dispatch<keyType extends keyof MsgKeyType>(key: keyType, data?: ValueType[ToAnyIndexKey<keyType, ValueType>], callback?: OnListenerResult<ResultType[ToAnyIndexKey<keyType, ResultType>]>, persistence?: boolean): void;\r\n    dispatchSticky<keyType extends keyof MsgKeyType>(key: keyType, data?: ValueType[ToAnyIndexKey<keyType, ValueType>], callback?: OnListenerResult<ResultType[ToAnyIndexKey<keyType, ResultType>]>, persistence?: boolean): void;\r\n    removeStickyBroadcast(key: keyof MsgKeyType): void;\r\n    isRegistered(key: keyof MsgKeyType): boolean;\r\n    getPersistentValue<keyType extends keyof MsgKeyType>(key: keyType): ValueType[ToAnyIndexKey<keyType, ValueType>] | undefined;\r\n    dispose(): void;\r\n}\r\n"}}
