{"code":"import { __awaiter } from \"tslib\";\r\nimport { assetManager, Asset, Prefab, SpriteFrame, sp } from \"cc\";\r\nconst DefaultBundle = \"resources\";\r\nexport class ResLoader {\r\n    loadAsset(path, type, nameOrUrl = DefaultBundle) {\r\n        //TODO: bundle.release和assetManager.releaseAsset的区别?\r\n        if (assetManager.assets.has(path)) {\r\n            const asset = assetManager.assets.get(path);\r\n            return Promise.resolve(asset);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            assetManager.loadBundle(nameOrUrl, (err, bundle) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    bundle.load(path, type, (err, data) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            data.addRef();\r\n                            resolve(data);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    loadPrefab(path, nameOrUrl = DefaultBundle) {\r\n        return this.loadAsset(path, Prefab, nameOrUrl);\r\n    }\r\n    loadSpriteFrame(ref, path, nameOrUrl = DefaultBundle) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const sf = yield this.loadAsset(path, SpriteFrame, nameOrUrl);\r\n            if (ref === null || ref === void 0 ? void 0 : ref.isValid) {\r\n                ref.spriteFrame = sf;\r\n                return Promise.resolve(sf);\r\n            }\r\n            else {\r\n                // 没有引用到的资源，释放掉\r\n                this.release(path, SpriteFrame, nameOrUrl);\r\n                return Promise.reject(new Error(\"Sprite is not valid\"));\r\n            }\r\n        });\r\n    }\r\n    loadSpine(ref, path, nameOrUrl = DefaultBundle) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const spine = yield this.loadAsset(path, sp.SkeletonData);\r\n            if (ref === null || ref === void 0 ? void 0 : ref.isValid) {\r\n                ref.skeletonData = spine;\r\n                return Promise.resolve(spine);\r\n            }\r\n            else {\r\n                // 没有引用到的资源，释放掉\r\n                this.release(path, sp.SkeletonData, nameOrUrl);\r\n                return Promise.reject(new Error(\"Spine is not valid\"));\r\n            }\r\n        });\r\n    }\r\n    release(pathOrAsset, type, nameOrUrl = DefaultBundle) {\r\n        if (typeof pathOrAsset === \"string\") {\r\n            const bundle = assetManager.getBundle(nameOrUrl);\r\n            const asset = bundle === null || bundle === void 0 ? void 0 : bundle.get(pathOrAsset, type);\r\n            asset === null || asset === void 0 ? void 0 : asset.decRef();\r\n            if ((asset === null || asset === void 0 ? void 0 : asset.refCount) === 0) {\r\n                bundle === null || bundle === void 0 ? void 0 : bundle.release(pathOrAsset, type);\r\n            }\r\n        }\r\n        else if (pathOrAsset instanceof Asset) {\r\n            pathOrAsset.decRef();\r\n            if (pathOrAsset.refCount === 0) {\r\n                assetManager.releaseAsset(pathOrAsset);\r\n            }\r\n        }\r\n    }\r\n}\r\n","references":["/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/src/core/index.ts"]}
