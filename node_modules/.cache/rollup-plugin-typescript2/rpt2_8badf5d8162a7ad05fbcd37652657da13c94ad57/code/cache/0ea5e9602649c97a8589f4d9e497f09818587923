{"code":"import { Color, Texture2D } from \"cc\";\r\n/**\r\n * 图像工具\r\n */\r\nexport class ImageUtil {\r\n    /**\r\n     * 获取纹理中指定像素的颜色，原点为左上角，从像素 (1, 1) 开始。\r\n     * @param texture 纹理\r\n     * @param x x 坐标\r\n     * @param y y 坐标\r\n     * @example\r\n        // 获取纹理左上角第一个像素的颜色\r\n        const color = ImageUtil.getPixelColor(texture, 1, 1);\r\n        cc.color(50, 100, 123, 255);\r\n     */\r\n    static getPixelColor(texture, x, y) {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = texture.width;\r\n        canvas.height = texture.height;\r\n        const image = texture.getHtmlElementObj();\r\n        ctx.drawImage(image, 0, 0, texture.width, texture.height);\r\n        const imageData = ctx.getImageData(0, 0, texture.width, texture.height);\r\n        const pixelIndex = ((y - 1) * texture.width * 4) + (x - 1) * 4;\r\n        const pixelData = imageData.data.slice(pixelIndex, pixelIndex + 4);\r\n        const color = new Color(pixelData[0], pixelData[1], pixelData[2], pixelData[3]);\r\n        image.remove();\r\n        canvas.remove();\r\n        return color;\r\n    }\r\n    /**\r\n     * 将图像转为 Base64 字符（仅 png、jpg 或 jpeg 格式资源）（有问题）\r\n     * @param url 图像地址\r\n     * @param callback 完成回调\r\n     */\r\n    static imageToBase64(url, callback) {\r\n        return new Promise(res => {\r\n            var _a;\r\n            let extname = (_a = /\\.png|\\.jpg|\\.jpeg/.exec(url)) === null || _a === void 0 ? void 0 : _a[0];\r\n            //@ts-ignore\r\n            if (['.png', '.jpg', '.jpeg'].includes(extname)) {\r\n                const canvas = document.createElement('canvas');\r\n                const ctx = canvas.getContext('2d');\r\n                const image = new Image();\r\n                image.src = url;\r\n                image.onload = () => {\r\n                    canvas.height = image.height;\r\n                    canvas.width = image.width;\r\n                    ctx.drawImage(image, 0, 0);\r\n                    extname = extname === '.jpg' ? 'jpeg' : extname.replace('.', '');\r\n                    const dataURL = canvas.toDataURL(`image/${extname}`);\r\n                    callback && callback(dataURL);\r\n                    res(dataURL);\r\n                    image.remove();\r\n                    canvas.remove();\r\n                };\r\n            }\r\n            else {\r\n                console.warn('Not a jpg/jpeg or png resource!');\r\n                callback && callback(\"\");\r\n                res(\"\");\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 将 Base64 字符转为 cc.Texture2D 资源（有问题）\r\n     * @param base64 Base64 字符\r\n     */\r\n    static base64ToTexture(base64) {\r\n        const image = document.createElement('img');\r\n        image.src = base64;\r\n        const texture = new Texture2D();\r\n        //@ts-ignore\r\n        texture.initWithElement(image);\r\n        image.remove();\r\n        return texture;\r\n    }\r\n    /**\r\n     * 将 Base64 字符转为二进制数据（有问题）\r\n     * @param base64 Base64 字符\r\n     */\r\n    static base64ToBlob(base64) {\r\n        const strings = base64.split(',');\r\n        //@ts-ignore\r\n        const type = /image\\/\\w+|;/.exec(strings[0])[0];\r\n        const data = window.atob(strings[1]);\r\n        const arrayBuffer = new ArrayBuffer(data.length);\r\n        const uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < data.length; i++) {\r\n            uint8Array[i] = data.charCodeAt(i) & 0xff;\r\n        }\r\n        return new Blob([uint8Array], { type: type });\r\n    }\r\n}\r\n","references":[]}
