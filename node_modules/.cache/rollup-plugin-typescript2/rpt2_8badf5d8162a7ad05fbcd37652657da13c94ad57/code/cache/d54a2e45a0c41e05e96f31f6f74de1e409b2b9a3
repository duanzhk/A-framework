{"code":"/** 对象工具 */\r\nexport class ObjectUtil {\r\n    /**\r\n     * 判断指定的值是否为对象\r\n     * @param value 值\r\n     */\r\n    static isObject(value) {\r\n        return Object.prototype.toString.call(value) === '[object Object]';\r\n    }\r\n    static isObjectLiteral(value) {\r\n        return value !== null && typeof value === 'object' && Object.getPrototypeOf(value) === Object.prototype;\r\n    }\r\n    /**\r\n     * 是否是数组\r\n     * @param target\r\n     */\r\n    static isArray(target) {\r\n        return Object.prototype.toString.call(target) === \"[object Array]\";\r\n    }\r\n    /**\r\n     * 深拷贝\r\n     * @param target 目标\r\n     */\r\n    static deepCopy(target) {\r\n        if (target == null || typeof target !== 'object') {\r\n            return target;\r\n        }\r\n        let result = null;\r\n        if (target instanceof Date) {\r\n            result = new Date();\r\n            result.setTime(target.getTime());\r\n            return result;\r\n        }\r\n        if (target instanceof Array) {\r\n            result = [];\r\n            for (let i = 0, length = target.length; i < length; i++) {\r\n                result[i] = this.deepCopy(target[i]);\r\n            }\r\n            return result;\r\n        }\r\n        if (target instanceof Object) {\r\n            result = {};\r\n            for (const key in target) {\r\n                if (target.hasOwnProperty(key)) {\r\n                    result[key] = this.deepCopy(target[key]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        console.warn(`不支持的类型：${result}`);\r\n    }\r\n    /**\r\n     * 拷贝对象\r\n     * @param target 目标\r\n     */\r\n    static copy(target) {\r\n        return JSON.parse(JSON.stringify(target));\r\n    }\r\n}\r\n","references":[]}
