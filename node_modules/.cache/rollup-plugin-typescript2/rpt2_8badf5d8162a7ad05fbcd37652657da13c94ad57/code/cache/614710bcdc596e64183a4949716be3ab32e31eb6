{"code":"/** 数组工具 */\r\nexport class ArrayUtil {\r\n    /**\r\n     * 数组去重，并创建一个新数组返回\r\n     * @param arr  源数组\r\n     */\r\n    static noRepeated(arr) {\r\n        var res = [arr[0]];\r\n        for (var i = 1; i < arr.length; i++) {\r\n            var repeat = false;\r\n            for (var j = 0; j < res.length; j++) {\r\n                if (arr[i] == res[j]) {\r\n                    repeat = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!repeat) {\r\n                res.push(arr[i]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * 复制二维数组\r\n     * @param array 目标数组\r\n     */\r\n    static copy2DArray(array) {\r\n        let newArray = [];\r\n        for (let i = 0; i < array.length; i++) {\r\n            newArray.push(array[i].concat());\r\n        }\r\n        return newArray;\r\n    }\r\n    /**\r\n     * Fisher-Yates Shuffle 随机置乱算法\r\n     * @param array 目标数组\r\n     */\r\n    static fisherYatesShuffle(array) {\r\n        let count = array.length;\r\n        while (count) {\r\n            let index = Math.floor(Math.random() * count--);\r\n            let temp = array[count];\r\n            array[count] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n    /**\r\n     * 混淆数组\r\n     * @param array 目标数组\r\n     */\r\n    static confound(array) {\r\n        let result = array.slice().sort(() => Math.random() - .5);\r\n        return result;\r\n    }\r\n    /**\r\n     * 数组扁平化\r\n     * @param array 目标数组\r\n     */\r\n    static flattening(array) {\r\n        for (; array.some(v => Array.isArray(v));) { // 判断 array 中是否有数组\r\n            array = [].concat.apply([], array); // 压扁数组\r\n        }\r\n        return array;\r\n    }\r\n    /** 删除数组中指定项 */\r\n    static removeItem(array, item) {\r\n        var temp = array.concat();\r\n        for (let i = 0; i < temp.length; i++) {\r\n            const value = temp[i];\r\n            if (item == value) {\r\n                array.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 合并数组\r\n     * @param array1 目标数组1\r\n     * @param array2 目标数组2\r\n     */\r\n    static combineArrays(array1, array2) {\r\n        let newArray = [...array1, ...array2];\r\n        return newArray;\r\n    }\r\n    /**\r\n     * 获取随机数组成员\r\n     * @param array 目标数组\r\n     */\r\n    static getRandomValueInArray(array) {\r\n        let newArray = array[Math.floor(Math.random() * array.length)];\r\n        return newArray;\r\n    }\r\n}\r\n","references":[]}
