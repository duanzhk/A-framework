{"code":"import { __awaiter } from \"tslib\";\r\nfunction getProps(uuid, result) {\r\n    result !== null && result !== void 0 ? result : (result = {});\r\n    return Editor.Message.request('scene', 'query-node-tree', uuid).then((data) => {\r\n        if (!data)\r\n            throw new Error('Node tree not found');\r\n        const promises = data.children.map((child) => __awaiter(this, void 0, void 0, function* () {\r\n            const name = child.name;\r\n            if (name.startsWith('#')) {\r\n                const arr = name.split('#');\r\n                result[child.uuid] = {\r\n                    key: arr[1],\r\n                    type: arr[2] || 'Node',\r\n                };\r\n            }\r\n            yield getProps(child.uuid, result);\r\n        }));\r\n        return Promise.all(promises).then(() => result);\r\n    });\r\n}\r\nfunction createScript(info) {\r\n    var _a, _b;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const basescript = `Base${info.name}`;\r\n        const prefix = \"db://assets/resources/\";\r\n        const __path__ = ((_a = info.url) === null || _a === void 0 ? void 0 : _a.startsWith(prefix)) ? (_b = info.url) === null || _b === void 0 ? void 0 : _b.slice(prefix.length, -\".prefab\".length) : info.url;\r\n        const imports = [...new Set(Object.keys(info.props).map(uuid => info.props[uuid].type))].join(',');\r\n        const defprops = Object.keys(info.props).map((uuid) => {\r\n            const propkey = info.props[uuid].key;\r\n            const proptype = info.props[uuid].type;\r\n            return `@property({ type: ${proptype} }) ${propkey}:${proptype} = null!;`;\r\n        }).join('\\n\\t');\r\n        //创建base脚本\r\n        let content = `\nimport { _decorator,Component,${imports} } from 'cc';\nimport { BaseView } from \"@mflow/libs\";\nconst { ccclass, property, disallowMultiple } = _decorator;\n@disallowMultiple()\nexport abstract class ${basescript} extends BaseView {\n    /** @internal */\n    private static readonly __path__: string = \"${__path__}\";\n    ${defprops}\n}`;\r\n        yield Editor.Message.request(\"asset-db\", 'create-asset', `db://assets/src/views/${basescript}.ts`, content, { overwrite: true });\r\n        console.log(`创建脚本成功: ${basescript}.ts`);\r\n        //创建ui脚本\r\n        const assets = yield Editor.Message.request('asset-db', 'query-assets', { pattern: `db://assets/**`, ccType: \"cc.Script\" });\r\n        if (assets.findIndex((asset) => asset.name == `${info.name}.ts`) >= 0) {\r\n            console.log(`跳过：${info.name}.ts脚本已存在，直接使用。请确保继承了${basescript}类。`);\r\n            return Promise.resolve();\r\n        }\r\n        content = `\n//@ts-ignore\nimport { ${basescript} } from 'db://assets/src/views/${basescript}';\nimport { _decorator } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('${info.name}')\nexport class ${info.name} extends ${basescript} {\n    onEnter(args?: any): void { }\n    onExit(): void { }\n    onPause(): void { }\n    onResume(): void { }\n}`;\r\n        yield Editor.Message.request(\"asset-db\", 'create-asset', `db://assets/src/game/gui/${info.name}.ts`, content);\r\n        console.log(`创建脚本成功: ${info.name}.ts`);\r\n    });\r\n}\r\nfunction createComponent(uuid, script) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const propnodeinfo = yield Editor.Message.request('scene', 'query-node-tree', uuid);\r\n        //@ts-ignore\r\n        const components = propnodeinfo.components;\r\n        if (components.findIndex((comp) => comp.type === script) < 0) {\r\n            const promise = yield Editor.Message.request('scene', 'create-component', {\r\n                uuid: uuid,\r\n                component: script\r\n            });\r\n            console.log(`挂载${script}成功`);\r\n            return promise;\r\n        }\r\n        else {\r\n            console.log(`跳过：已经挂载了${script}，直接设置属性。请确保继承了Base${script}类。`);\r\n        }\r\n    });\r\n}\r\nfunction setProps(uuid, props) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const promise = yield Promise.all(Object.keys(props).map((propnodeuuid) => __awaiter(this, void 0, void 0, function* () {\r\n            const propkey = props[propnodeuuid].key;\r\n            const proptype = props[propnodeuuid].type;\r\n            let propcompuuid = propnodeuuid;\r\n            if (proptype != 'Node') {\r\n                const propnodeinfo = yield Editor.Message.request('scene', 'query-node-tree', propnodeuuid);\r\n                //@ts-ignore\r\n                const components = propnodeinfo.components;\r\n                propcompuuid = components.find((comp) => comp.type === `cc.${proptype}`).value;\r\n            }\r\n            return Editor.Message.request('scene', 'set-property', {\r\n                uuid: uuid,\r\n                //这里的 1 表示的是当前你要设置的组件在整个节点的组件列表的第几位。\r\n                //可以先通过 const index = node.components.findIndex((comp: any) => comp.uuid === animationComp.uuid); \r\n                //类似这样，只要能知道你设置组件在第几位即可。目前Prefab上只有Transform和脚本组件，所以直接写死1就可以了。\r\n                path: `__comps__.1.${propkey}`,\r\n                dump: {\r\n                    type: `cc.${proptype}`,\r\n                    value: {\r\n                        //这里对应的是属性类型的uuid(比如node上挂载的label、button等组件的uuid)\r\n                        //如果是node类型的属性，直接传入node的uuid即可。\r\n                        //如果是组件类型的属性，需要先获取组件的uuid，再传入。\r\n                        uuid: propcompuuid,\r\n                    }\r\n                }\r\n            });\r\n        })));\r\n        console.log('设置属性成功');\r\n        return promise;\r\n    });\r\n}\r\nexport function onHierarchyMenu(assetInfo) {\r\n    return [\r\n        {\r\n            label: 'i18n:mflow-framework.export',\r\n            enabled: true,\r\n            click() {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    try {\r\n                        const uuid = Editor.Selection.getSelected(Editor.Selection.getLastSelectedType())[0];\r\n                        const node = yield Editor.Message.request('scene', 'query-node', uuid);\r\n                        const script = node.name.value;\r\n                        const path = yield Editor.Message.request('asset-db', 'query-url', node.__prefab__.uuid);\r\n                        //获取prefab中被指定导出的属性\r\n                        const props = yield getProps(uuid);\r\n                        //创建脚本\r\n                        yield createScript({ url: path, name: script, props: props });\r\n                        //挂载脚本\r\n                        yield createComponent(uuid, script);\r\n                        //设置属性\r\n                        yield setProps(uuid, props);\r\n                        //保存prefab\r\n                        yield Editor.Message.request('scene', 'save-scene');\r\n                        console.log('全部完成');\r\n                    }\r\n                    catch (e) {\r\n                        console.error('请选中一个prefab的节点');\r\n                    }\r\n                });\r\n            },\r\n        },\r\n    ];\r\n}\r\n;\r\n","references":["/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/@cocos/creator-types/editor/packages/asset-db/@types/public.d.ts"]}
