{"code":"//ServiceLocator：管理跨领域基础服务\r\nexport class ServiceLocator {\r\n    static regService(key, provider) {\r\n        if (typeof provider === 'function') {\r\n            // 注册工厂函数（延迟执行）\r\n            this.services.set(key, { factory: provider });\r\n        }\r\n        else {\r\n            // 直接注册实例\r\n            this.services.set(key, { factory: () => provider, instance: provider });\r\n        }\r\n    }\r\n    static getService(key) {\r\n        const entry = this.services.get(key);\r\n        if (!entry)\r\n            throw new Error(`Service ${key} not registered!`);\r\n        // 单例模式：若已有实例，直接返回\r\n        if (entry.instance)\r\n            return entry.instance;\r\n        // 执行工厂函数，创建实例并缓存\r\n        const instance = entry.factory();\r\n        entry.instance = instance; // 缓存实例（单例）\r\n        return instance;\r\n    }\r\n    static remove(key) {\r\n        this.services.delete(key);\r\n    }\r\n    static clear() {\r\n        this.services.clear();\r\n    }\r\n}\r\nServiceLocator.services = new Map();\r\n","references":[],"dts":{"name":"/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/ServiceLocator.d.ts","writeByteOrderMark":false,"text":"export declare class ServiceLocator {\r\n    private static services;\r\n    static regService<T>(key: string, provider: T): void;\r\n    static getService<T>(key: string): T;\r\n    static remove(key: string): void;\r\n    static clear(): void;\r\n}\r\n"}}
