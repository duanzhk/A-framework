{"code":"/** 时间工具 */\r\nexport class TimeUtil {\r\n    /** 间隔天数 */\r\n    static daysBetween(time1, time2) {\r\n        if (time2 == undefined || time2 == null) {\r\n            time2 = +new Date();\r\n        }\r\n        let startDate = new Date(time1).toLocaleDateString();\r\n        let endDate = new Date(time2).toLocaleDateString();\r\n        let startTime = new Date(startDate).getTime();\r\n        let endTime = new Date(endDate).getTime();\r\n        let dates = Math.abs((startTime - endTime)) / (1000 * 60 * 60 * 24);\r\n        return dates;\r\n    }\r\n    /** 间隔秒数 */\r\n    static secsBetween(time1, time2) {\r\n        if (time2 == undefined || time2 == null) {\r\n            time2 = +new Date();\r\n        }\r\n        let dates = Math.abs((time2 - time1)) / (1000);\r\n        return dates;\r\n    }\r\n    /**\r\n     * 检查和上一次时间相比是否是新的一天\r\n     * @param lastCheck 上一次检查时间\r\n     * @returns\r\n     */\r\n    static isNewDay(lastCheck) {\r\n        const lastCheckDate = lastCheck ? new Date(Date.parse(lastCheck)) : new Date(new Date().setHours(0, 0, 0, 0) - 24 * 60 * 60 * 1000);\r\n        // 获取当前时间，并设置为当天的开始（午夜12点）  \r\n        const now = new Date(new Date().setHours(0, 0, 0, 0));\r\n        return now.getDate() !== lastCheckDate.getDate() || now.getMonth() !== lastCheckDate.getMonth() || now.getFullYear() !== lastCheckDate.getFullYear();\r\n    }\r\n    /**\r\n     * 把时间格式化为00:00:00\r\n     * @param seconds 时间\r\n     * @returns\r\n     */\r\n    static format1(seconds) {\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        const secs = seconds % 60;\r\n        // 使用padStart来确保小时、分钟和秒都是两位数  \r\n        const formattedHours = hours.toString().padStart(2, '0');\r\n        const formattedMinutes = minutes.toString().padStart(2, '0');\r\n        const formattedSeconds = secs.toString().padStart(2, '0');\r\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n    }\r\n    /**\r\n     * 时间格式化\r\n     * @param date  时间对象\r\n     * @param fmt   格式化字符(yyyy-MM-dd hh:mm:ss S)\r\n     */\r\n    static format2(date, fmt) {\r\n        var o = {\r\n            \"M+\": date.getMonth() + 1,\r\n            \"d+\": date.getDate(),\r\n            \"h+\": date.getHours(),\r\n            \"m+\": date.getMinutes(),\r\n            \"s+\": date.getSeconds(),\r\n            \"q+\": Math.floor((date.getMonth() + 3) / 3),\r\n            \"S\": date.getMilliseconds() // 毫秒 \r\n        };\r\n        if (/(y+)/.test(fmt)) {\r\n            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n        }\r\n        for (var k in o) {\r\n            if (new RegExp(\"(\" + k + \")\").test(fmt)) {\r\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n            }\r\n        }\r\n        return fmt;\r\n    }\r\n    /**\r\n     * 把时间戳转换为xx.xx.xx\r\n     * @param timestamp 时间戳\r\n     * @returns\r\n     */\r\n    static format3(timestamp) {\r\n        const date = new Date(timestamp);\r\n        const year = date.getFullYear();\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        const day = date.getDate().toString().padStart(2, '0');\r\n        return `${year}.${month}.${day}`;\r\n    }\r\n}\r\n","references":[],"dts":{"name":"/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/TimeUtil.d.ts","writeByteOrderMark":false,"text":"/** 时间工具 */\r\nexport declare class TimeUtil {\r\n    /** 间隔天数 */\r\n    static daysBetween(time1: number | string | Date, time2: number | string | Date): number;\r\n    /** 间隔秒数 */\r\n    static secsBetween(time1: number, time2: number): number;\r\n    /**\r\n     * 检查和上一次时间相比是否是新的一天\r\n     * @param lastCheck 上一次检查时间\r\n     * @returns\r\n     */\r\n    static isNewDay(lastCheck?: any): boolean;\r\n    /**\r\n     * 把时间格式化为00:00:00\r\n     * @param seconds 时间\r\n     * @returns\r\n     */\r\n    static format1(seconds: number): string;\r\n    /**\r\n     * 时间格式化\r\n     * @param date  时间对象\r\n     * @param fmt   格式化字符(yyyy-MM-dd hh:mm:ss S)\r\n     */\r\n    static format2(date: Date, fmt: string): string;\r\n    /**\r\n     * 把时间戳转换为xx.xx.xx\r\n     * @param timestamp 时间戳\r\n     * @returns\r\n     */\r\n    static format3(timestamp: number): string;\r\n}\r\n"}}
