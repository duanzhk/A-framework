{"code":"import { Quat, toRadian, Vec3 } from \"cc\";\r\nimport { MathUtil } from \".\";\r\n/** 旋转工具 */\r\nexport class RotateUtil {\r\n    /**\r\n     * 自由旋转\r\n     * @param target     旋转目标\r\n     * @param axis       围绕旋转的轴\r\n     * @param rad        旋转弧度\r\n     */\r\n    static rotateAround(target, axis, rad) {\r\n        var quat = new Quat();\r\n        Quat.rotateAround(quat, target.getRotation(), axis.normalize(), rad);\r\n        target.setRotation(quat);\r\n    }\r\n    /**\r\n     * 参考瞄准目标,使当前物体围绕瞄准目标旋转\r\n     * 1、先通过弧度计算旋转四元数\r\n     * 2、通过旋转中心点或当前目标点向量相减计算出移动方向\r\n     * 3、计算起始向量旋转后的向量\r\n     * 4、计算旋转后的坐标点\r\n     * @param lookAt  瞄准目标\r\n     * @param target        旋转目标\r\n     * @param axis          围绕旋转的轴(例：Vec3.UP为Y轴)\r\n     * @param rad           旋转弧度(例：delta.x * 1e-2)\r\n     */\r\n    static rotateAroundTarget(lookAt, target, axis, rad) {\r\n        // 计算坐标\r\n        var point_lookAt = lookAt.worldPosition; // 锚点坐标\r\n        var point_target = target.worldPosition; // 目标坐标\r\n        var quat = new Quat();\r\n        var vec3 = new Vec3();\r\n        // 算出坐标点的旋转四元数\r\n        Quat.fromAxisAngle(quat, axis, rad);\r\n        // 计算旋转点和现有点的向量\r\n        Vec3.subtract(vec3, point_target, point_lookAt);\r\n        // 计算将向量做旋转操作后的向量\r\n        Vec3.transformQuat(vec3, vec3, quat);\r\n        // 计算目标旋转后的点\r\n        Vec3.add(vec3, point_lookAt, vec3);\r\n        target.setWorldPosition(vec3);\r\n        // 计算目标朝向瞄准点\r\n        Quat.rotateAround(quat, target.worldRotation, axis, rad);\r\n        Quat.normalize(quat, quat);\r\n        target.setWorldRotation(quat);\r\n    }\r\n    /**\r\n     * 获取心半径边上的位置\r\n     * @param center    圆心\r\n     * @param radius    半径\r\n     * @param angle     角度\r\n     */\r\n    static circularEdgePosition(center, radius, angle) {\r\n        let edge = Vec3.UNIT_Z.multiplyScalar(radius); // 距离圆心Z抽的距离\r\n        let dir = MathUtil.subV3(edge, center); // 初始圆心与目标位置的方向\r\n        let vec3 = new Vec3();\r\n        var quat = new Quat();\r\n        // 算出坐标点的旋转四元数\r\n        Quat.fromAxisAngle(quat, Vec3.UP, toRadian(angle));\r\n        // 计算将向量做旋转操作后的向量\r\n        Vec3.transformQuat(vec3, dir, quat);\r\n        // 计算目标旋转后的点\r\n        Vec3.add(vec3, center, vec3);\r\n        return vec3;\r\n    }\r\n}\r\n","references":["/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/src/utils/index.ts"],"dts":{"name":"/Users/dzk/Documents/git-projects/cocos-modular-flow-framework/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/RotateUtil.d.ts","writeByteOrderMark":false,"text":"import { Node, Vec3 } from \"cc\";\r\n/** 旋转工具 */\r\nexport declare class RotateUtil {\r\n    /**\r\n     * 自由旋转\r\n     * @param target     旋转目标\r\n     * @param axis       围绕旋转的轴\r\n     * @param rad        旋转弧度\r\n     */\r\n    static rotateAround(target: Node, axis: Vec3, rad: number): void;\r\n    /**\r\n     * 参考瞄准目标,使当前物体围绕瞄准目标旋转\r\n     * 1、先通过弧度计算旋转四元数\r\n     * 2、通过旋转中心点或当前目标点向量相减计算出移动方向\r\n     * 3、计算起始向量旋转后的向量\r\n     * 4、计算旋转后的坐标点\r\n     * @param lookAt  瞄准目标\r\n     * @param target        旋转目标\r\n     * @param axis          围绕旋转的轴(例：Vec3.UP为Y轴)\r\n     * @param rad           旋转弧度(例：delta.x * 1e-2)\r\n     */\r\n    static rotateAroundTarget(lookAt: Node, target: Node, axis: Vec3, rad: number): void;\r\n    /**\r\n     * 获取心半径边上的位置\r\n     * @param center    圆心\r\n     * @param radius    半径\r\n     * @param angle     角度\r\n     */\r\n    static circularEdgePosition(center: Vec3, radius: number, angle: number): Vec3;\r\n}\r\n"}}
